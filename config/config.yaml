services:

  AuthService:
    arguments: ["@UserProvider", "/login", "/"]

  CsrfGuard:
    arguments: []

  LoggerFactory:
    arguments: ["./storage/logs/logs.json"]

  RequestLoggerSetter:
    arguments: ["@LoggerFactory"]

  RequestSizeValidator:
    arguments: []

  RedisConnection:
    arguments: ["#redis.address", "#redis.password", "#redis.database", "#redis.maxidle", "#redis.maxactive", "#redis.idletimeout"]

  RedisConnectionMiddleware:
    arguments: []

  SessionsMiddleware:
    arguments: ["sid", "@RedisConnection"]

  UserProvider:
    arguments: []

  # Controllers:

  IndexController:
    arguments: []

  CliController:
    arguments: []

web:
  http_port: 8081
  templates_path: "web/templates"
  shutdown_timeout: 5000

  routing:

    routes:

      IndexController:index:
        url: "/"
        methods: ["GET"]
        controller: "IndexController:Index"

      IndexController:pageWithParam:
        url: "/page-with-param/:parameterValue"
        methods: ["GET"]
        controller: "IndexController:PageWithParam"

      IndexController:privatePage:
        url: "/private-page"
        methods: ["GET"]
        controller: "IndexController:PrivatePage"
        event_listeners:
          - {event: kernelEvent.RequestReceived, listener: "AuthService:RedirectToLoginIfNotAuthenticated", priority: 41}

      IndexController:loginPage:
        url: "/login"
        methods: ["GET"]
        controller: "IndexController:LoginPage"
        event_listeners:
          - {event: kernelEvent.RequestReceived, listener: "AuthService:RedirectIfAuthenticated", priority: 41}

      IndexController:performLogin:
        url: "/login-perform"
        methods: ["POST"]
        controller: "IndexController:PerformLoginLogout"
        event_listeners:
          - {event: kernelEvent.RequestReceived, listener: "AuthService:RedirectIfAuthenticated", priority: 41}
          - {event: kernelEvent.RequestReceived, listener: "AuthService:AuthenticateByLogPass", priority: 42}

      IndexController:performLogout:
        url: "/logout"
        methods: ["GET"]
        controller: "IndexController:PerformLoginLogout"
        event_listeners:
          - {event: kernelEvent.RequestReceived, listener: "AuthService:LogOut", priority: 39}

    # Request level event listeners common for all routes
    event_listeners:
      - {event: kernelEvent.RequestReceived, listener: "RequestLoggerSetter:SetLoggerToRequestContext", priority: 15}
      - {event: kernelEvent.RequestReceived, listener: "SessionsMiddleware:RequestSessionStart", priority: 20}
      - {event: kernelEvent.RequestReceived, listener: "RequestSizeValidator:ValidateBodySize", priority: 30}
      - {event: kernelEvent.RequestReceived, listener: "CsrfGuard:Set", priority: 30}
      - {event: kernelEvent.RequestReceived, listener: "CsrfGuard:Check", priority: 35}
      - {event: kernelEvent.RequestReceived, listener: "AuthService:AuthenticateBySession", priority: 40}
      - {event: kernelEvent.ResponseBeforeSend, listener: "SessionsMiddleware:RequestSessionAddResponseHeader", priority: 20}
      - {event: kernelEvent.RequestTermination, listener: "RequestLoggerSetter:CloseLogger", priority: 100}

cli:

  commands:

    CliController:command1:
      name: command1
      controller: "CliController:Command1"
      help: "first cli command"

# Application level event listeners
event_listeners:
  - {event: kernelEvent.ApplicationLaunched, listener: "RedisConnectionMiddleware:InitRedisConnection", priority: 10}
  - {event: kernelEvent.ApplicationTermination, listener: "RedisConnectionMiddleware:CloseRedisConnection", priority: 10}
